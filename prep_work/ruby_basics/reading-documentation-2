1. Methods Without Arguments
Q: How would you use String#upcase to create an uppercase version of the string "xyz"?
A: This information can be found in the String documentation. Upcase is an instance method. "xyz".upcase returns a new uppercase copy of the original string, "xyz".upcase! modifies the string in place.

2. Required Arguments
Q: Assume you have this Array:
a = %w(a b c d e)
How would you use Array#insert to insert the numbers 5, 6, and 7 between the elements with values 'c' and 'd'?
A: This information can be found in the Array documentation. This instance method modifies and returns the array. The first number indicates the index. If it is positive, the values will be added before the index. If the index is negative, the values will be inserted after the index. So it would be a.insert(3, 5, 6, 7) or a.insert(-3, 5, 6, 7)

3. Optional Arguments
Q: Assume you have the following code:

s = 'abc def ghi,jkl mno pqr,stu vwx yz'
puts s.split.inspect
puts s.split(',').inspect
puts s.split(',', 2).inspect
What will each of the 3 puts statements print?
A:
Split is an instance method that does not mutate the original string. It takes two arguments, a pattern (whose default value is nil) and a limit (that is optional), and outputs an array that is split based on the pattern. The limit determines how many elements the array will have.
s.split.inspect will output ["abc", "def", "ghi,jkl", "mno", "pqr,stu", "vwx", "yz"] This is because if there is no pattern defined, it will split on whitespace.
s.split(',').inspect will output ["abc def ghi", "jkl mno pqr", "stu vwx yz"] because the pattern ',' is being used to split the string.
s.split(',', 2).inspect will output ["abc def ghi", "jkl mno pqr, stu vwx yz"] because the 2 is the limit of how many strings will be returned.

4. Optional Arguments Redux
Q: Assume you have the following code:

require 'date'

puts Date.new
puts Date.new(2016)
puts Date.new(2016, 5)
puts Date.new(2016, 5, 13)
What will each of the 4 puts statements print?
A: Date is a module in the Standard Library. We can tell this because we have to require it to gain access to its' methods.
Date.new is a class method that returns a Date object. It will return with the default arguments for the new method: year -4712 month 1 day 1
Date.new(2016) will return a Date object with 2016 as the year and default month and day (01-01)
Date.new(2016, 5) will return a Date object with 2016 as the year 5 as the month and the default day (01)
Date.new(2016, 5, 13) will return a Date object with 2016 as the year, 5 as the month, and 13 as the day.

5. Mandatory Blocks
Q: The Array#bsearch method is used to search ordered Arrays more quickly than #find and #select can. Assume you have the following code:

a = [1, 4, 8, 11, 15, 19]
How would you search this Array to find the first element whose value exceeds 8?
A: Bsearch is an instance method in the Array class in the core library. It takes a block as a required argument and returns an element. It does not mutate the original array.
To find one element, you would need to write a condition that evaluates to true or false. so a.bsearch{|x| x > 8 } will return 11.

6. Multiple Signatures
Q: What do each of these puts statements output?

a = %w(a b c d e)
puts a.fetch(7)
puts a.fetch(7, 'beats me')
puts a.fetch(7) { |index| index**2 }
A: fetch is an instance method in the Array class. It takes an index, an index and a default value, or an index and a block, and returns an object.
a.fetch(7) will return an IndexError: index 7 is out of array bounds.
a.fetch(7, 'beats me') will return 'beats me' instead of returning an IndexError.
a.fetch(7) {|index| index**2 } will return 49. Note that this block is only executing because 7 is out of array bounds. a.fetch(1){ |index| index**2 } returns "b"

7. Keyword Arguments
Q: What does this code print?

5.step(to: 10, by: 3) { |value| puts value }
A: Step is an instance method of the Numeric class. It takes two different forms of arguments, keyword argument style (by:, to:) and fixed position argument style (10, 2). It also takes an optional block.
to: is a limit, that's how much the number should be increased to. by: is a step, that's how much it should be increased by. In this example, we start at 5, we stop at 10, and we increase by 3 every time.
5.step(to:10, by:3) {|value| puts value } will output 5, 8

8. Parent Class
Q: Use irb to run the following code:

s = 'abc'
puts s.public_methods.inspect
You should find that it prints a list of all of the public methods available to the String s; this includes not only those methods defined in the String class, but also methods that are inherited from Object (which inherits other methods from the BasicObject class and the Kernel module). That's a lot of methods.

How would you modify this code to print just the public methods that are defined or overridden by the String class? That is, the list should exclude all members that are only defined in Object, BasicObject, and Kernel.
A: puts s.public_methods(all=false).inspect
Public_methods is an instance method of the Object class. It takes an optional argument called all, which is defaulted to true. When all is set to false, only the methods of the receiver class (in this case String) will be listed.

9. Included Modules
Q: Use irb to run the following code:

a = [5, 9, 3, 11]
puts a.min
Find the documentation for the #min method and change the above code to print the two smallest values in the Array.
A: puts a.min(2) . Without min I would use a.sort.slice(0,2) or a.sort.take(2)

10. Down the Rabbit Hole
Q: Sometimes, the documentation is going to leave you scratching your head.

In a very early assignment at Launch School, you are tasked with writing a program that loads some text messages from a YAML file. We do this with YAML::load_file:

require 'yaml'
MESSAGES = YAML.load_file('calculator_messages.yml')
Find the documentation for YAML::load_file.
A: The YAML module is a wrapper for the psych module, so it's listed as a psych method.
