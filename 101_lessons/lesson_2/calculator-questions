1. Is there a better way to validate that the user has input a number?

Perhaps we can check if the input (which is input as a string) contains letters or numerical characters.

2. It looks like you can call to_i or to_f to convert strings to integers and floats, respectively. Look up the String#to_i and String#to_f documentation in Ruby docs and look at their various examples and use cases.

Difference between to_i and to_f (besides returning floats or integers): to_i also takes an optional integer argument that tells to_i what number base the string is in.

3. Our operation_to_message method is a little dangerous, because we're relying on the case statement being the last expression in the method. What if we needed to add some code after the case statement within the method? What changes would be needed to keep the method working with the rest of the program? We'll show a solution in an upcoming assignment.

We could assign the result of the case statement to a variable and return that variable as the last line in the method.

4. Most Rubyists don't invoke methods with parentheses, unless they're passing in a parameter. For example, we use name.empty?(), but most Rubyists would write name.empty?. Some Rubyists even go as far as not putting parentheses around method calls even when passing in parameters. For example, they would write prompt "hi there" as opposed to prompt("hi there").

Try removing some of the optional parentheses when calling methods to get your eyes acquainted with reading different styles of Ruby code. This will be especially useful if you are using a DSL written in Ruby, like Rspec or Rails.

5. We're using Kernel.puts() and Kernel.gets(). But the Kernel. is extraneous as well as the parentheses. Therefore, we can just call those methods by gets and puts. We already know that in Ruby we can omit the parentheses, but how come we can also omit the Kernel.?

My (wrong) answer:
The Kernel class is like Ruby's operating system. Kernel contains all the functions that the Ruby interpreter needs to run, so it's already been loaded behind the scenes, and since it's already been loaded by the interpreter you don't need to call Kernel to use those methods.

6. There are lots of messages sprinkled throughout the program. Could we move them into some configuration file and access by key? This would allow us to manage the messages much easier, and we could even internationalize the messages. This is just a thought experiment, and no need to code this up.

We could probably store messages in a text file at the simplest, but it would probably be more suitable to create a specialized file (like the rubocop configuration) that would allow us to mark up the messages to make them easier to retrieve.
