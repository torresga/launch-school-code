flintstones = ["Fred", "Barney", "Wilma", "Betty", "Pebbles", "BamBam"]

1.
With #each_with_index:
flintstone_hash = {}

flintstones.each_with_index do |person, index|
  flintstone_hash[person] = index
end

2.
With #each_with_object and using Array#index:
flintstones.each_with_object({}) do |person, hash|
  hash[person] = flintstones.index(person)
end
Note: Array#index would not work if multiple elements of a collection had the same value but different indices, ex. ["Wilma", "Wilma", "Wilma"] because it returns the index of the first object that is equal to the argument.

Using #each_with_object and a counter variable:
counter = 0
flintstones.each_with_object({}) do |person, hash|
  hash[person] = counter
  counter += 1
end

3. As a loop:
flintstone_hash = {}
counter = 0

loop do
  current_flintstone = flintstones[counter]
  flintstone_hash[current_flintstone] = counter
  counter += 1
  break if counter == flintstones.size
end

4. Using #each and a counter:
counter = 0
flintstone_hash = {}

flintstones.each do |person|
  flintstone_hash[person] = counter
  counter += 1
end
Note: would probably not use this in the wild due to #each_with_index existing.

5. Using #map:
counter = 0
flintstone_hash = {}

flintstones.map do |person|
  flintstone_hash[person] = counter
  counter += 1
end
Note: would not use this one in the wild because we are not creating a new transformed collection, rather we are just iterating over the current collection. In this case, #map is analogous to #each.
